{"version":3,"file":"component---src-pages-laghetti-rimontarte-tsx-625f0291cd1ce4320177.js","mappings":"yNAGO,MAAMA,EAAaC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAAC,YAAA,gBAAVJ,CAAU,uCAEhCK,IAAA,IAAC,UAAEC,GAAWD,EAAA,OAAKC,EAAY,cAAcA,OAAiB,EAAE,IAChEC,IAAA,IAAC,WAAEC,GAAYD,EAAA,OAAKC,EAAa,cAAcA,OAAkB,EAAE,IACnEC,IAAA,IAAC,UAAEC,GAAWD,EAAA,OAAKC,EAAY,cAAcA,OAAiB,EAAE,IAChEC,IAAA,IAAC,WAAEC,GAAYD,EAAA,OAAKC,EAAa,cAAcA,OAAkB,EAAE,IAG1DC,GAAmBb,EAAAA,EAAAA,SAAOc,EAAAA,IAAKZ,WAAA,CAAAC,YAAA,2BAAAC,YAAA,gBAAZJ,CAAY,+BCkC5C,MAxCyBK,IAAA,IAAC,MACxBU,EAAK,YACLC,EAAW,IACXC,EAAG,MACHC,EAAK,UACLC,EAAS,UACTC,EAAS,SACTC,EAAQ,UACRC,EAAS,SACTC,GAWDlB,EAAA,OACCmB,EAAAA,cAACC,EAAY,CAACjB,WAAYc,EAAWhB,UAAWiB,EAAUX,WAAYQ,EAAWV,UAAWW,GAC1FG,EAAAA,cAACV,EAAAA,GAAI,CAACY,wBAAyB,CAAEC,OAAQZ,KACzCS,EAAAA,cAACI,EAAAA,EAAW,CACVV,MAAOA,EACPD,IAAKA,EACLY,MAAO,CAAEC,aAAc,MAAOC,UAAW,KAE1CZ,EACCK,EAAAA,cAACV,EAAAA,GAAI,KAAC,WAASK,GAEfK,EAAAA,cAACV,EAAAA,GAAI,KAAC,sBAERU,EAAAA,cAACC,EAAkB,CAACI,MAAO,CACzBN,SAAUL,EAAMc,OAEhBN,wBAAyB,CAAEC,OAAQX,KACxB,ECxCV,MAAMiB,EAAcjC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,gBAAVJ,CAAU,sFAQxBkC,EAAelC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,gBAAVJ,CAAU,kEAOzBmC,EAAiBnC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,yBAAAC,YAAA,gBAAVJ,CAAU,sCAK3BoC,EAAqBpC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,6BAAAC,YAAA,gBAAVJ,CAAU,oEAO/BqC,EAAsBrC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,8BAAAC,YAAA,gBAAVJ,CAAU,oECvBhCsC,EAAoBC,GAAwB,CAACC,EAA+BC,KACvF,MAAMC,EAAYD,EAAIE,WAEtB,OAAQH,EAAQI,MACd,IAAK,QACH,MACMC,EADmBL,EACeA,QAAQM,KAAIC,GAClDR,EAAOS,MAAKC,GAAOA,EAAIC,WAAaH,MAEtC,OACEvB,EAAAA,cAACC,EAAc,CAACgB,IAAKC,GAClBG,EAAeC,KAAI,CAACG,EAAKE,IACxBF,EACEA,EAAI/B,OACFM,EAAAA,cAAC4B,EAAgB,CACfX,IAAKU,EACLpC,MAAOkC,EAAIlC,MACXC,YAAaiC,EAAIjC,YACjBC,IAAKgC,EAAIhC,KAAOgC,EAAIjC,YACpBE,MAAO+B,EAAI/B,MACXC,UAAW8B,EAAI9B,UACfC,UAAWoB,EAAQpB,UACnBC,SAAUmB,EAAQnB,SAClBC,UAAWkB,EAAQlB,UACnBC,SAAUiB,EAAQjB,WAItBC,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAK,OAAOU,KAAS,sBAKrC,IAAK,OACH,MAAME,EAAoBb,EACpBc,EAAUD,EAAkBb,QAAQe,KAAK,YAC/C,IAAKD,EAAS,OAAO9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,GAAW,kBAE3C,MAAM,KAAEc,EAAI,SAAEC,GAAaJ,EAC3B,OAAQA,EAAkBK,MACxB,IAAK,KACH,OACElC,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAGhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,KACH,OACE9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KAEhG,IAAK,OACH,OAAO9B,EAAAA,cAACV,EAAAA,GAAO,CAAC2B,IAAKC,EAAWiB,WAAYF,EAAUG,MAAOJ,EAAM9B,wBAAyB,CAAEC,OAAQ2B,KACxG,QACE,OAAO9B,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,GAAW,uBAEnC,IAAK,cAAe,CAClB,MAAMmB,EAAyBrB,GACxBsB,EAAgBC,GAAmBF,EAAuBrB,QACjE,OAAQhB,EAAAA,cAACC,EAAgB,CAACgB,IAAKC,GAC7BlB,EAAAA,cAACC,EAAoB,KAClBqC,EAAehB,KAAI,CAACkB,EAAIC,IAAQ3B,EAAiBC,EAAjBD,CAAyB0B,EAAI,iBAAiBC,QAEjFzC,EAAAA,cAACC,EAAqB,KACnBsC,EAAgBjB,KAAI,CAACkB,EAAIC,IAAQ3B,EAAiBC,EAAjBD,CAAyB0B,EAAI,kBAAkBC,QAGvF,CACA,QACE,OAAOzC,EAAAA,cAACV,EAAAA,GAAI,CAAC2B,IAAKC,GAAW,0BACjC,ECpGF,MANKrC,IAAA,IAAC,SAAE6D,EAAQ,OAAE3B,GAAQlC,EAAA,OACxBmB,EAAAA,cAACC,EAAa,KACXyC,EAASpB,IAAIR,EAAiBC,IACjB,C,qviBC4DlB,MA9DoD4B,KAClD,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,aA2BtB7B,EAAU8B,EAAAA,EAChB,IAAK9B,EAAS,OAAQhB,EAAAA,cAAC+C,EAAAA,EAAa,KAClC/C,EAAAA,cAACV,EAAAA,GAAI,KAAC,2BAKR,MAAM0D,EAAWJ,EAAKK,qBAAqBC,MACrCnC,EAAS6B,EAAKO,QAAQD,MAGtB7B,EAAiB2B,EAAS1B,KAAK8B,IACnC,MAAM1D,EAAQqB,EAAOS,MAAMC,GAAaA,EAAI4B,OAASD,EAAK1B,WAC1D,MAAO,IACF0B,EACH1D,MAAOA,GAAQ4D,EAAAA,EAAAA,GAAS5D,EAAM6D,iBAAmB,KAClD,IAEGC,GAAUF,EAAAA,EAAAA,GAASvC,EAAOS,MAAMC,GAA0B,oCAAbA,EAAI4B,OAA4CE,iBAEnG,OACEvD,EAAAA,cAAC+C,EAAAA,EAAa,KACZ/C,EAAAA,cAAA,OAAKK,MAAO,CAAEoD,YAAa,WACxBD,GAAWxD,EAAAA,cAACI,EAAAA,EAAW,CACtBV,MAAO8D,EACP/D,IAAK,kBACLY,MAAO,CAAEC,aAAc,MAAOC,UAAW,EAAGR,SAAU,QAG1DC,EAAAA,cAAC0D,EAAAA,EAAkB,CAAChB,SAAU1B,EAASD,OAAQM,IACjC,EAMb,MAAMsC,EAAeA,IAC1B3D,EAAAA,cAAA,aAAO,iD","sources":["webpack://site-gruppo-natura-lentiai/./src/components/image-with-credits/styled.ts","webpack://site-gruppo-natura-lentiai/./src/components/image-with-credits/index.tsx","webpack://site-gruppo-natura-lentiai/./src/components/pagedata-text-components/styled.ts","webpack://site-gruppo-natura-lentiai/./src/components/pagedata-text-components/helpers.tsx","webpack://site-gruppo-natura-lentiai/./src/components/pagedata-text-components/index.tsx","webpack://site-gruppo-natura-lentiai/./src/pages/laghetti/rimontarte.tsx"],"sourcesContent":["import styled from \"styled-components\"\nimport * as T from \"./../typography\"\n\nexport const ImgWrapper = styled.div<{ $maxWidth?: number, $maxHeight?: number, $minWidth?: number, $minHeight?: number }>`\n  text-align: center;\n  ${({ $maxWidth }) => $maxWidth ? `max-width: ${$maxWidth}px;` : \"\"}\n  ${({ $maxHeight }) => $maxHeight ? `max-width: ${$maxHeight}px;` : \"\"}\n  ${({ $minWidth }) => $minWidth ? `min-width: ${$minWidth}px;` : \"\"}\n  ${({ $minHeight }) => $minHeight ? `min-width: ${$minHeight}px;` : \"\"}\n`\n\nexport const ImageDescription = styled(T.P3)`\n  white-space: break-spaces;\n`","import { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport * as React from \"react\"\nimport * as T from \"./../typography\"\nimport * as S from \"./styled\"\n\nconst ImageWithCredits = ({\n  title,\n  description,\n  alt,\n  image,\n  copyright,\n  minHeight,\n  minWidth,\n  maxHeight,\n  maxWidth\n}: {\n  title: string\n  description: string\n  alt: string\n  image: IGatsbyImageData\n  copyright: string | undefined\n  minWidth?: number\n  minHeight?: number\n  maxWidth?: number,\n  maxHeight?: number\n}) => (\n  <S.ImgWrapper $maxHeight={maxHeight} $maxWidth={maxWidth} $minHeight={minHeight} $minWidth={minWidth}>\n    <T.H3 dangerouslySetInnerHTML={{ __html: title }} />\n    <GatsbyImage\n      image={image}\n      alt={alt}\n      style={{ borderRadius: \"8px\", marginTop: 4 }}\n    />\n    {copyright ? (\n      <T.P4>Foto di {copyright}</T.P4>\n    ) : (\n      <T.P4>Autore sconosciuto</T.P4>\n    )}\n    <S.ImageDescription style={{\n      maxWidth: image.width\n    }}\n      dangerouslySetInnerHTML={{ __html: description }} />\n  </S.ImgWrapper>\n)\n\nexport default ImageWithCredits\n","import styled from \"styled-components\"\n\nexport const MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 32px;\n  justify-content: center;\n`\n\nexport const ImageWrapper = styled.div`\n  display: flex;\n  gap: 40px;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nexport const TwoColsWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nexport const LeftTwoColsWrapper = styled.div`\n  flex: 1;\n  padding: 16px;\n  align-content: center;\n  justify-items: center;\n`\n\nexport const RightTwoColsWrapper = styled.div`\n  flex: 1;\n  padding: 16px;\n  align-content: center;\n  justify-items: center;\n`","import { DataJSONType, ImageContentData, ImageData, TemplateTwoColumnsData, TextContentData } from \"../../types\";\nimport ImageWithCredits from \"../image-with-credits\";\nimport * as S from \"./styled\";\nimport * as T from \"./../typography\"\nimport React from \"react\"\n\nexport const renderComponents = (images: ImageData[]) => (content: DataJSONType[number], key: Number | string): any => {\n  const keyString = key.toString()\n\n  switch (content.type) {\n    case \"image\":\n      const castedImgContent = content as ImageContentData\n      const filteredImages = castedImgContent.content.map(imgFilename =>\n        images.find(img => img.fileName === imgFilename),\n      )\n      return (\n        <S.ImageWrapper key={keyString}>\n          {filteredImages.map((img, index) =>\n            img ? (\n              img.image && (\n                <ImageWithCredits\n                  key={index}\n                  title={img.title}\n                  description={img.description}\n                  alt={img.alt || img.description}\n                  image={img.image}\n                  copyright={img.copyright}\n                  minHeight={content.minHeight}\n                  minWidth={content.minWidth}\n                  maxHeight={content.maxHeight}\n                  maxWidth={content.maxWidth}\n                />\n              )\n            ) : (\n              <T.H2 key={`img-${index}`}>Image not found</T.H2>\n            ),\n          )}\n        </S.ImageWrapper>\n      )\n    case \"text\":\n      const castedTextContent = content as TextContentData\n      const theText = castedTextContent.content.join(\" <br /> \")\n      if (!theText) return <T.H2 key={keyString}>Text not found</T.H2>\n\n      const { font, position } = castedTextContent\n      switch (castedTextContent.size) {\n        case \"h1\":\n          return (\n            <T.H1 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"h2\":\n          return (\n            <T.H2 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"h3\":\n          return (\n            <T.H3 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"h4\":\n          return (\n            <T.H4 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"h5\":\n          return (\n            <T.H5 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"h6\":\n          return (\n            <T.H6 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"h7\":\n          return (\n            <T.H7 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"p1\":\n          return (\n            <T.P1 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"p2\":\n          return (\n            <T.P2 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n\n          )\n        case \"p3\":\n          return (\n            <T.P3 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"p4\":\n          return (\n            <T.P4 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"p5\":\n          return (\n            <T.P5 key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n          )\n        case \"note\":\n          return <T.Notes key={keyString} $textAlign={position} $font={font} dangerouslySetInnerHTML={{ __html: theText }} />\n        default:\n          return <T.H2 key={keyString}>Text size not found</T.H2>\n      }\n    case \"two-columns\": {\n      const castedTwoColsComponent = content as TemplateTwoColumnsData\n      const [leftComponents, rightComponents] = castedTwoColsComponent.content\n      return (<S.TwoColsWrapper key={keyString}>\n        <S.LeftTwoColsWrapper>\n          {leftComponents.map((lc, idx) => renderComponents(images)(lc, `two-cols-left-${idx}`))}\n        </S.LeftTwoColsWrapper>\n        <S.RightTwoColsWrapper>\n          {rightComponents.map((lc, idx) => renderComponents(images)(lc, `two-cols-right-${idx}`))}\n        </S.RightTwoColsWrapper>\n      </S.TwoColsWrapper>)\n    }\n    default:\n      return <T.H1 key={keyString}>Content type Not Found</T.H1>\n  }\n}","import React from \"react\"\nimport { DataJSONType, ImageData } from \"../../types\"\nimport { renderComponents } from \"./helpers\"\nimport * as S from \"./styled\"\n\nconst ContentToComponent: React.FC<{\n  pageData: DataJSONType\n  images: ImageData[]\n}> = ({ pageData, images }) => (\n  <S.MainWrapper>\n    {pageData.map(renderComponents(images))}\n  </S.MainWrapper>\n)\n\nexport default ContentToComponent\n","import { graphql, useStaticQuery, type HeadFC, type PageProps } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport * as React from \"react\"\nimport dataJSON from \"../../../content/laghetti/rimontarte.json\"\nimport DefaultLayout from \"../../components/default-layout\"\nimport ContentToComponent from \"../../components/pagedata-text-components\"\nimport { DataJSONType, ImageData } from \"../../types\"\nimport * as T from \"./../../components/typography\"\n\nconst LaghettiRimontartePage: React.FC<PageProps> = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allImageMetadataJson(filter: { tags: { in: [\"laghetti-rimontarte\"] } }) {\n        nodes {\n          title\n          description\n          fileName\n          tags\n          copyright\n          alt\n        }\n      }\n      allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n        nodes {\n          base\n          childImageSharp {\n            gatsbyImageData(\n              width: 1200\n              placeholder: BLURRED\n              formats: [AUTO, WEBP, AVIF]\n            )\n          }\n        }\n      }\n    }\n  `)\n\n  const content = dataJSON.rimontarte as DataJSONType\n  if (!content) return (<DefaultLayout>\n    <T.H1>Contenuto non trovato!</T.H1>\n  </DefaultLayout>\n  )\n\n  // Map metadata and image nodes\n  const metadata = data.allImageMetadataJson.nodes\n  const images = data.allFile.nodes\n\n  // Match images to metadata using the fileName\n  const filteredImages = metadata.map((meta: any) => {\n    const image = images.find((img: any) => img.base === meta.fileName)\n    return {\n      ...meta,\n      image: image ? getImage(image.childImageSharp) : null,\n    }\n  }) as ImageData[]\n  const logoImg = getImage(images.find((img: any) => img.base === 'rimontarte-logo-transparent.png').childImageSharp)\n\n  return (\n    <DefaultLayout>\n      <div style={{ justifySelf: \"center\" }}>\n        {logoImg && <GatsbyImage\n          image={logoImg}\n          alt={\"Rimontarte Logo\"}\n          style={{ borderRadius: \"8px\", marginTop: 4, maxWidth: 400 }}\n        />}\n      </div>\n      <ContentToComponent pageData={content} images={filteredImages} />\n    </DefaultLayout>\n  )\n}\n\nexport default LaghettiRimontartePage\n\nexport const Head: HeadFC = () => (\n  <title>Gruppo Natura Lentiai - Laghetti della Rimonta</title>\n)\n"],"names":["ImgWrapper","styled","div","withConfig","displayName","componentId","_ref","$maxWidth","_ref2","$maxHeight","_ref3","$minWidth","_ref4","$minHeight","ImageDescription","T","title","description","alt","image","copyright","minHeight","minWidth","maxHeight","maxWidth","React","S","dangerouslySetInnerHTML","__html","GatsbyImage","style","borderRadius","marginTop","width","MainWrapper","ImageWrapper","TwoColsWrapper","LeftTwoColsWrapper","RightTwoColsWrapper","renderComponents","images","content","key","keyString","toString","type","filteredImages","map","imgFilename","find","img","fileName","index","ImageWithCredits","castedTextContent","theText","join","font","position","size","$textAlign","$font","castedTwoColsComponent","leftComponents","rightComponents","lc","idx","pageData","LaghettiRimontartePage","data","useStaticQuery","dataJSON","DefaultLayout","metadata","allImageMetadataJson","nodes","allFile","meta","base","getImage","childImageSharp","logoImg","justifySelf","ContentToComponent","Head"],"sourceRoot":""}