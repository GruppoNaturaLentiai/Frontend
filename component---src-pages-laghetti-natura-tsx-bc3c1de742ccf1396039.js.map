{"version":3,"file":"component---src-pages-laghetti-natura-tsx-bc3c1de742ccf1396039.js","mappings":"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","sources":["webpack://site-gruppo-natura-lentiai/./src/components/image-with-credits/styled.ts","webpack://site-gruppo-natura-lentiai/./src/components/image-with-credits/index.tsx","webpack://site-gruppo-natura-lentiai/./src/components/mobile-pagedata-text-components/styled.ts","webpack://site-gruppo-natura-lentiai/./src/components/mobile-pagedata-text-components/index.tsx","webpack://site-gruppo-natura-lentiai/./src/components/mobile-pagedata-text-components/helpers.tsx","webpack://site-gruppo-natura-lentiai/./src/components/pagedata-text-components/styled.ts","webpack://site-gruppo-natura-lentiai/./src/components/pagedata-text-components/helpers.tsx","webpack://site-gruppo-natura-lentiai/./src/components/pagedata-text-components/index.tsx","webpack://site-gruppo-natura-lentiai/./src/pages/laghetti/natura.tsx"],"sourcesContent":["import styled from \"styled-components\"\nimport * as T from \"./../typography\"\n\nexport const ImgWrapper = styled.div<{\n  $maxWidth?: number\n  $maxHeight?: number\n  $minWidth?: number\n  $minHeight?: number\n}>`\n  text-align: center;\n  ${({ $maxWidth }) => ($maxWidth ? `max-width: ${$maxWidth}px;` : \"\")}\n  ${({ $maxHeight }) => ($maxHeight ? `max-width: ${$maxHeight}px;` : \"\")}\n  ${({ $minWidth }) => ($minWidth ? `min-width: ${$minWidth}px;` : \"\")}\n  ${({ $minHeight }) => ($minHeight ? `min-width: ${$minHeight}px;` : \"\")}\n`\n\nexport const ImageDescription = styled(T.P3)`\n  white-space: break-spaces;\n`\n","import { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport * as React from \"react\"\nimport * as T from \"./../typography\"\nimport * as S from \"./styled\"\n\nconst ImageWithCredits = ({\n  title,\n  description,\n  alt,\n  image,\n  copyright,\n  minHeight,\n  minWidth,\n  maxHeight,\n  maxWidth,\n}: {\n  title: string\n  description: string\n  alt: string\n  image: IGatsbyImageData\n  copyright: string | undefined\n  minWidth?: number\n  minHeight?: number\n  maxWidth?: number\n  maxHeight?: number\n}) => (\n  <S.ImgWrapper\n    $maxHeight={maxHeight}\n    $maxWidth={maxWidth}\n    $minHeight={minHeight}\n    $minWidth={minWidth}\n  >\n    <T.H3 dangerouslySetInnerHTML={{ __html: title }} />\n    <GatsbyImage\n      image={image}\n      alt={alt}\n      style={{ borderRadius: \"8px\", marginTop: 4 }}\n    />\n    {copyright ? (\n      <T.P4>Foto di {copyright}</T.P4>\n    ) : (\n      <T.P4>Autore sconosciuto</T.P4>\n    )}\n    <S.ImageDescription\n      style={{\n        maxWidth: image.width,\n      }}\n      dangerouslySetInnerHTML={{ __html: description }}\n    />\n  </S.ImgWrapper>\n)\n\nexport default ImageWithCredits\n","import styled from \"styled-components\"\nimport { breakpoint, breakpointNum, colors } from \"../../styles\"\nimport * as T from \"./../typography\"\n\nexport const MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 32px;\n  justify-content: center;\n  @media (min-width: ${breakpointNum.bigtablet + 1}px) {\n    display: none;\n  }\n  @media (max-width: ${breakpointNum.tablet}px) {\n    padding: 24px;\n  }\n  @media (max-width: ${breakpointNum.mobile}px) {\n    padding: 16px;\n  }\n`\n\nexport const ImageWrapper = styled.div`\n  display: flex;\n  gap: 40px;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nexport const TwoWrapperMobile = styled.div`\n  @media (min-width: ${breakpointNum.bigtablet + 1}px) {\n    display: none;\n  }\n  min-height: 100px;\n`\n\nexport const ContinueReading = styled(T.P2)`\n  color: ${colors.green.green700};\n`\n\nexport const TextWrapper = styled.div<{ $isExpanded: boolean }>`\n  position: relative;\n  overflow: hidden;\n  max-height: ${({ $isExpanded }) => ($isExpanded ? \"1000px\" : \"4.5em\")};\n  transition: max-height 0.8s ease-in-out;\n`\n\nexport const TextContainer = styled.div`\n  position: relative;\n`\n\nexport const FadeOut = styled.div<{ $isExpanded: boolean; $isShort: boolean }>`\n  ${({ $isShort }) => $isShort && \"display:none;\"}\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 2em;\n  background: linear-gradient(to bottom, transparent, ${colors.green.green500});\n  pointer-events: none;\n\n  opacity: ${({ $isExpanded }) => ($isExpanded ? 0 : 1)};\n  transition: opacity 0.8s ease-in-out;\n`\n","import React, { useState } from \"react\"\nimport {\n  DataJSONType,\n  ImageContentData,\n  ImageData,\n  TemplateTwoColumnsData,\n  TextContentData,\n} from \"../../types\"\nimport * as T from \"./../typography\"\nimport { renderImage, renderText } from \"./helpers\"\nimport * as S from \"./styled\"\n\nconst renderComponents =\n  (\n    images: ImageData[],\n    setExpandText: React.Dispatch<React.SetStateAction<any>>,\n    expandText: any,\n  ) =>\n  (content: DataJSONType[number], key: Number | string): any => {\n    const keyString = key.toString()\n    switch (content.type) {\n      case \"image\":\n        const castedImgContent = content as ImageContentData\n        return renderImage(castedImgContent, images, keyString)\n\n      case \"text\":\n        const castedTextContent = content as TextContentData\n        return renderText(\n          castedTextContent,\n          keyString,\n          setExpandText,\n          expandText,\n        )\n\n      case \"two-columns\": {\n        const castedTwoColsComponent = content as TemplateTwoColumnsData\n        const [leftComponents, rightComponents] = castedTwoColsComponent.content\n\n        const mobileTexts = [...leftComponents, ...rightComponents].filter(\n          ({ type }) => type === \"text\",\n        )\n\n        const mobileImages = [...leftComponents, ...rightComponents].filter(\n          ({ type }) => type === \"image\",\n        )\n        return (\n          <S.TwoWrapperMobile key={keyString}>\n            {[...mobileImages, ...mobileTexts].map((lc, idx) =>\n              renderComponents(\n                images,\n                setExpandText,\n                expandText,\n              )(lc, `two-cols-seq-${keyString}-${idx}`),\n            )}\n          </S.TwoWrapperMobile>\n        )\n      }\n      default:\n        return <T.H1 key={keyString}>Content type Not Found</T.H1>\n    }\n  }\n\nconst MobileContentToComponent: React.FC<{\n  pageData: DataJSONType\n  images: ImageData[]\n}> = ({ pageData, images }) => {\n  const [expandText, setExpandText] = useState(\"\")\n  return (\n    <S.MainWrapper>\n      {pageData.map(renderComponents(images, setExpandText, expandText))}\n    </S.MainWrapper>\n  )\n}\nexport default MobileContentToComponent\n","import React from \"react\"\nimport { ImageContentData, ImageData, TextContentData } from \"../../types\"\nimport ImageWithCredits from \"../image-with-credits\"\nimport * as T from \"../typography\"\nimport * as S from \"./styled\"\n\nexport const renderImage = (\n  content: ImageContentData,\n  images: ImageData[],\n  key: string,\n) => {\n  const filteredImages = content.content.map(imgFilename =>\n    images.find(img => img.fileName === imgFilename),\n  )\n  return (\n    <S.ImageWrapper key={key}>\n      {filteredImages.map((img, index) =>\n        img ? (\n          img.image && (\n            <ImageWithCredits\n              key={index}\n              title={img.title}\n              description={img.description}\n              alt={img.alt || img.description}\n              image={img.image}\n              copyright={img.copyright}\n              minHeight={content.minHeight}\n              minWidth={content.minWidth}\n              maxHeight={content.maxHeight}\n              maxWidth={content.maxWidth}\n            />\n          )\n        ) : (\n          <T.H2 key={`img-${index}`}>Image not found</T.H2>\n        ),\n      )}\n    </S.ImageWrapper>\n  )\n}\n\nexport const renderText = (\n  content: TextContentData,\n  key: string,\n  setExpandText: React.Dispatch<React.SetStateAction<string>>,\n  expandText: string,\n) => {\n  const theText = content.content.join(\" <br /> \")\n  if (!theText) return <T.H2 key={key}>Text not found</T.H2>\n\n  const isExpanded = key === expandText\n  const onClickFn = () => {\n    if (key === expandText) setExpandText(\"\")\n    else setExpandText(key)\n  }\n\n  const isShortText = theText.length < 200\n\n  const { font, position } = content\n  switch (content.size) {\n    case \"h1\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.H1\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"h2\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.H2\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"h3\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.H3\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"h4\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.H4\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"h5\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.H5\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"h6\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.H6\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"h7\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.H7\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"p1\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.P1\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"p2\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.P2\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"p3\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.P3\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"p4\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.P4\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"p5\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.P5\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    case \"note\":\n      return (\n        <S.TextWrapper $isExpanded={isExpanded} key={key}>\n          <S.TextContainer onClick={onClickFn}>\n            <T.Notes\n              $textAlign={position}\n              $font={font}\n              dangerouslySetInnerHTML={{ __html: theText }}\n            />\n          </S.TextContainer>\n          <S.FadeOut $isExpanded={isExpanded} $isShort={isShortText} />\n        </S.TextWrapper>\n      )\n    default:\n      return <T.H2 key={key}>Text size not found</T.H2>\n  }\n}\n","import styled from \"styled-components\"\nimport { breakpoint, breakpointNum } from \"../../styles\"\n\nexport const MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 32px;\n  justify-content: center;\n  @media (max-width: ${breakpointNum.bigtablet}px) {\n    display: none;\n  }\n`\n\nexport const ImageWrapper = styled.div`\n  display: flex;\n  gap: 40px;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nexport const TwoColsWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  @media (max-width: ${breakpoint.bigtablet}) {\n    display: none;\n  }\n`\n\nexport const LeftTwoColsWrapper = styled.div`\n  flex: 1;\n  padding: 16px;\n  align-content: center;\n  justify-items: center;\n`\n\nexport const RightTwoColsWrapper = styled.div`\n  flex: 1;\n  padding: 16px;\n  align-content: center;\n  justify-items: center;\n`\n","import {\n  DataJSONType,\n  ImageContentData,\n  ImageData,\n  TemplateTwoColumnsData,\n  TextContentData,\n} from \"../../types\"\nimport ImageWithCredits from \"../image-with-credits\"\nimport * as S from \"./styled\"\nimport * as T from \"./../typography\"\nimport React from \"react\"\n\nexport const renderComponents =\n  (images: ImageData[]) =>\n  (content: DataJSONType[number], key: Number | string): any => {\n    const keyString = key.toString()\n\n    switch (content.type) {\n      case \"image\":\n        const castedImgContent = content as ImageContentData\n        const filteredImages = castedImgContent.content.map(imgFilename =>\n          images.find(img => img.fileName === imgFilename),\n        )\n        return (\n          <S.ImageWrapper key={keyString}>\n            {filteredImages.map((img, index) =>\n              img ? (\n                img.image && (\n                  <ImageWithCredits\n                    key={index}\n                    title={img.title}\n                    description={img.description}\n                    alt={img.alt || img.description}\n                    image={img.image}\n                    copyright={img.copyright}\n                    minHeight={content.minHeight}\n                    minWidth={content.minWidth}\n                    maxHeight={content.maxHeight}\n                    maxWidth={content.maxWidth}\n                  />\n                )\n              ) : (\n                <T.H2 key={`img-${index}`}>Image not found</T.H2>\n              ),\n            )}\n          </S.ImageWrapper>\n        )\n      case \"text\":\n        const castedTextContent = content as TextContentData\n        const theText = castedTextContent.content.join(\" <br /> \")\n        if (!theText) return <T.H2 key={keyString}>Text not found</T.H2>\n\n        const { font, position } = castedTextContent\n        switch (castedTextContent.size) {\n          case \"h1\":\n            return (\n              <T.H1\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"h2\":\n            return (\n              <T.H2\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"h3\":\n            return (\n              <T.H3\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"h4\":\n            return (\n              <T.H4\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"h5\":\n            return (\n              <T.H5\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"h6\":\n            return (\n              <T.H6\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"h7\":\n            return (\n              <T.H7\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"p1\":\n            return (\n              <T.P1\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"p2\":\n            return (\n              <T.P2\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"p3\":\n            return (\n              <T.P3\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"p4\":\n            return (\n              <T.P4\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"p5\":\n            return (\n              <T.P5\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          case \"note\":\n            return (\n              <T.Notes\n                key={keyString}\n                $textAlign={position}\n                $font={font}\n                dangerouslySetInnerHTML={{ __html: theText }}\n              />\n            )\n          default:\n            return <T.H2 key={keyString}>Text size not found</T.H2>\n        }\n      case \"two-columns\": {\n        const castedTwoColsComponent = content as TemplateTwoColumnsData\n        const [leftComponents, rightComponents] = castedTwoColsComponent.content\n        return (\n          <S.TwoColsWrapper key={keyString}>\n            <S.LeftTwoColsWrapper>\n              {leftComponents.map((lc, idx) =>\n                renderComponents(images)(lc, `two-cols-left-${idx}`),\n              )}\n            </S.LeftTwoColsWrapper>\n            <S.RightTwoColsWrapper>\n              {rightComponents.map((lc, idx) =>\n                renderComponents(images)(lc, `two-cols-right-${idx}`),\n              )}\n            </S.RightTwoColsWrapper>\n          </S.TwoColsWrapper>\n        )\n      }\n      default:\n        return <T.H1 key={keyString}>Content type Not Found</T.H1>\n    }\n  }\n","import React from \"react\"\nimport { DataJSONType, ImageData } from \"../../types\"\nimport { renderComponents } from \"./helpers\"\nimport * as S from \"./styled\"\n\nconst ContentToComponent: React.FC<{\n  pageData: DataJSONType\n  images: ImageData[]\n}> = ({ pageData, images }) => (\n  <S.MainWrapper>{pageData.map(renderComponents(images))}</S.MainWrapper>\n)\n\nexport default ContentToComponent\n","import { graphql, useStaticQuery, type HeadFC, type PageProps } from \"gatsby\"\nimport { getImage } from \"gatsby-plugin-image\"\nimport * as React from \"react\"\nimport dataJSON from \"../../../content/laghetti/natura.json\"\nimport DefaultLayout from \"../../components/default-layout\"\nimport ContentToComponent from \"../../components/pagedata-text-components\"\nimport { DataJSONType, ImageData } from \"../../types\"\nimport * as T from \"./../../components/typography\"\nimport MobileContentToComponent from \"../../components/mobile-pagedata-text-components\"\n\nconst LaghettiNaturaPage: React.FC<PageProps> = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allImageMetadataJson(filter: { tags: { in: [\"laghetti-natura\"] } }) {\n        nodes {\n          title\n          description\n          fileName\n          tags\n          copyright\n          alt\n        }\n      }\n      allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n        nodes {\n          base\n          childImageSharp {\n            gatsbyImageData(\n              width: 600\n              placeholder: BLURRED\n              formats: [AUTO, WEBP, AVIF]\n            )\n          }\n        }\n      }\n    }\n  `)\n\n  const content = dataJSON.natura as DataJSONType\n  if (!content)\n    return (\n      <DefaultLayout>\n        <T.H1>Contenuto non trovato!</T.H1>\n      </DefaultLayout>\n    )\n\n  // Map metadata and image nodes\n  const metadata = data.allImageMetadataJson.nodes\n  const images = data.allFile.nodes\n\n  // Match images to metadata using the fileName\n  const filteredImages = metadata.map((meta: any) => {\n    const image = images.find((img: any) => img.base === meta.fileName)\n    return {\n      ...meta,\n      image: image ? getImage(image.childImageSharp) : null,\n    }\n  }) as ImageData[]\n\n  return (\n    <DefaultLayout>\n      <ContentToComponent pageData={content} images={filteredImages} />\n      <MobileContentToComponent pageData={content} images={filteredImages} />\n    </DefaultLayout>\n  )\n}\n\nexport default LaghettiNaturaPage\n\nexport const Head: HeadFC = () => (\n  <title>Gruppo Natura Lentiai - Laghetti della Rimonta</title>\n)\n"],"names":["ImgWrapper","styled","div","withConfig","displayName","componentId","_ref","$maxWidth","_ref2","$maxHeight","_ref3","$minWidth","_ref4","$minHeight","ImageDescription","T","title","description","alt","image","copyright","minHeight","minWidth","maxHeight","maxWidth","React","S","dangerouslySetInnerHTML","__html","GatsbyImage","style","borderRadius","marginTop","width","MainWrapper","breakpointNum","bigtablet","tablet","mobile","ImageWrapper","TwoWrapperMobile","TextWrapper","colors","green","green700","$isExpanded","TextContainer","FadeOut","$isShort","green500","renderComponents","images","setExpandText","expandText","content","key","keyString","toString","type","renderImage","filteredImages","map","imgFilename","find","img","fileName","index","ImageWithCredits","renderText","theText","join","isExpanded","onClickFn","isShortText","length","font","position","size","onClick","$textAlign","$font","castedTwoColsComponent","leftComponents","rightComponents","mobileTexts","concat","_toConsumableArray","filter","mobileImages","lc","idx","pageData","useState","TwoColsWrapper","breakpoint","LeftTwoColsWrapper","RightTwoColsWrapper","castedTextContent","LaghettiNaturaPage","data","useStaticQuery","dataJSON","DefaultLayout","metadata","allImageMetadataJson","nodes","allFile","meta","base","getImage","childImageSharp","ContentToComponent","MobileContentToComponent","Head"],"sourceRoot":""}