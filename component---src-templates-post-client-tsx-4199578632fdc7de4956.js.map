{"version":3,"file":"component---src-templates-post-client-tsx-4199578632fdc7de4956.js","mappings":"4KAAO,MAAMA,EACX,sE,oFC+HF,UAvGqCC,KAAM,IAAAC,EAAAC,EAAAC,EAAAC,EACzC,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,eACfC,EAAOF,GAEP,EAACG,EAAI,EAAEC,IAAWC,EAAAA,EAAAA,UAA4B,OAC9C,EAACC,EAAO,EAAEC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,EAACG,EAAK,EAAEC,IAAYJ,EAAAA,EAAAA,UAAwB,OAuDlDK,EAAAA,EAAAA,YAAU,KACSC,WACfJ,GAAW,GACX,MAAMK,OAxDYD,WACpB,IACE,MAAME,EAAQ,gVAoBRC,QAAiBC,MAAMrB,EAAAA,EAAkB,CAC7CsB,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEP,YAGnBQ,QAAeP,EAASQ,OAC9B,GAAID,EAAOE,OACT,MAAM,IAAIC,MAAMH,EAAOE,OAAO,GAAGE,SAInC,MAAMC,EAAUL,EAAOM,KAAKC,QACzBC,QACE1B,GACCA,EAAKD,KAAK4B,UAAY5B,GACtBC,EAAKD,KAAK4B,UAAY5B,EAAK6B,MAAM,GAAI,KAExCC,GAAG,GACN,OAAKN,IACHO,QAAQC,KAAK,yBAA0BhC,QACvC+B,QAAQE,IAAI,mBAAoBd,EAAOM,MAI3C,CAAE,MAAOS,GAEP,OADA3B,EAAS,8BACF,IACT,GAM4B4B,CAAcnC,GACpCU,GACFR,EAAQQ,GAEVL,GAAW,EAAM,EAGnB+B,EAAU,GACT,CAACpC,IAGJ,MAAMqC,GAAcpC,aAAI,EAAJA,EAAMqC,QAAS,aAC7BC,GAAoBtC,aAAI,EAAJA,EAAMuC,cAAe,KACzCC,GAAaxC,aAAI,EAAJA,EAAMyC,UAAW,KAC9BC,GAAS1C,aAAI,EAAJA,EAAM0C,SAAU,KAGzBC,GAAa3C,SAAW,QAAPP,EAAJO,EAAM4C,aAAK,IAAAnD,GAAO,QAAPC,EAAXD,EAAaoD,aAAK,IAAAnD,OAAd,EAAJA,EAAoBoD,UAAW,GAC5CC,GAAiB/C,SAAW,QAAPL,EAAJK,EAAM4C,aAAK,IAAAjD,GAAO,QAAPC,EAAXD,EAAakD,aAAK,IAAAjD,OAAd,EAAJA,EAAoBoD,MAAO,KAGlD,OAAI7C,EAAgB8C,EAAAA,cAAA,SAAG,kBACnB5C,EAAc4C,EAAAA,cAAA,SAAG,WAAS5C,GAG5B4C,EAAAA,cAACC,EAAAA,EAAa,KACZD,EAAAA,cAACE,EAAAA,EAAI,CACHf,YAAaA,EACbE,kBAAmBA,QAAAA,EAAqB,GACxCc,iBAAaC,EACbN,eAAgBA,QAAAA,EAAkB,GAClCP,WAAYA,EACZE,OAAQA,QAAAA,EAAU,GAClBY,cAAeX,IAEH,C","sources":["webpack://site-gruppo-natura-lentiai/./src/constants.ts","webpack://site-gruppo-natura-lentiai/./src/templates/post-client.tsx"],"sourcesContent":["export const remoteGraphqlURL =\n  \"https://ze02ljgl.api.sanity.io/v2023-08-01/graphql/post-blog/default\" as const\n\n// export const pathPrefix = \"/Frontend\" as const // old when hosted in https://grupponaturalentiai.github.io/Frontend\nexport const pathPrefix = \"\" // actual having bought the domain\n","import { useLocation } from \"@reach/router\"\nimport React, { useEffect, useState } from \"react\"\nimport DefaultLayout from \"../components/default-layout\"\nimport Post from \"../components/post\"\nimport { remoteGraphqlURL } from \"../constants\"\n\n// type for fetching remote data: dynamic fallback\ntype RemotePost = {\n  title: string\n  publishedAt: string\n  bodyRaw: any\n  author?: string\n  image?: {\n    asset?: {\n      url?: string\n      description?: string\n      altText?: string\n      title?: string\n    }\n  }\n  slug: {\n    current: string\n  }\n}\n\nconst PostClientTemplate: React.FC = () => {\n  const { pathname } = useLocation()\n  const slug = pathname // Use the full path as the slug\n\n  const [post, setPost] = useState<RemotePost | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchPostData = async (slug: string) => {\n    try {\n      const query = `query {\n        allPost {\n          title\n          slug {\n            current\n          }\n          publishedAt\n          bodyRaw\n          author\n          image {\n            asset {\n              description\n              title\n              altText\n              url\n            }\n          }\n        }\n      }`\n\n      const response = await fetch(remoteGraphqlURL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ query }),\n      })\n\n      const result = await response.json()\n      if (result.errors) {\n        throw new Error(result.errors[0].message)\n      }\n\n      // TODO typing\n      const thePost = result.data.allPost\n        .filter(\n          (post: RemotePost) =>\n            post.slug.current === slug ||\n            post.slug.current === slug.slice(0, -1),\n        )\n        .at(0)\n      if (!thePost) {\n        console.warn(\"No post found for slug\", slug)\n        console.log(\"Posts found were\", result.data)\n        return\n      }\n      return thePost\n    } catch (err) {\n      setError(\"Failed to fetch post data.\")\n      return null\n    }\n  }\n\n  useEffect(() => {\n    const loadPost = async () => {\n      setLoading(true)\n      const fetchedPost = await fetchPostData(slug)\n      if (fetchedPost) {\n        setPost(fetchedPost)\n      }\n      setLoading(false)\n    }\n\n    loadPost()\n  }, [slug])\n\n  // If we have static data, use it. Otherwise, use dynamic data\n  const renderTitle = post?.title || \"Loading...\"\n  const renderPublishedAt = post?.publishedAt || null\n  const renderBody = post?.bodyRaw || null\n  const author = post?.author || null\n\n  // main image code\n  const mainImgAlt = post?.image?.asset?.altText || \"\"\n  const renderImageUrl = post?.image?.asset?.url || null\n\n  // Handle loading and error states\n  if (loading) return <p>Caricamento...</p>\n  if (error) return <p>Errore: {error}</p>\n\n  return (\n    <DefaultLayout>\n      <Post\n        renderTitle={renderTitle}\n        renderPublishedAt={renderPublishedAt ?? \"\"}\n        gatsbyImage={undefined}\n        renderImageUrl={renderImageUrl ?? \"\"}\n        renderBody={renderBody}\n        author={author ?? \"\"}\n        coverImageAlt={mainImgAlt}\n      />\n    </DefaultLayout>\n  )\n}\n\nexport default PostClientTemplate\n"],"names":["remoteGraphqlURL","PostClientTemplate","_post$image","_post$image$asset","_post$image2","_post$image2$asset","pathname","useLocation","slug","post","setPost","useState","loading","setLoading","error","setError","useEffect","async","fetchedPost","query","response","fetch","method","headers","body","JSON","stringify","result","json","errors","Error","message","thePost","data","allPost","filter","current","slice","at","console","warn","log","err","fetchPostData","loadPost","renderTitle","title","renderPublishedAt","publishedAt","renderBody","bodyRaw","author","mainImgAlt","image","asset","altText","renderImageUrl","url","React","DefaultLayout","Post","gatsbyImage","undefined","coverImageAlt"],"sourceRoot":""}