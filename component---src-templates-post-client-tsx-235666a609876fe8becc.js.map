{"version":3,"file":"component---src-templates-post-client-tsx-235666a609876fe8becc.js","mappings":"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","sources":["webpack://site-gruppo-natura-lentiai/./src/constants.ts","webpack://site-gruppo-natura-lentiai/./src/templates/post-client.tsx"],"sourcesContent":["export const remoteGraphqlURL =\n  \"https://ze02ljgl.api.sanity.io/v2023-08-01/graphql/post-blog/default\" as const\n\n// export const pathPrefix = \"/Frontend\" as const // old when hosted in https://grupponaturalentiai.github.io/Frontend\nexport const pathPrefix = \"\" // actual having bought the domain\n","import { useLocation, navigate } from \"@reach/router\"\nimport React, { useEffect, useState } from \"react\"\nimport DefaultLayout from \"../components/default-layout\"\nimport Post from \"../components/post\"\nimport { remoteGraphqlURL } from \"../constants\"\n\n// type for fetching remote data: dynamic fallback\ntype RemotePost = {\n  title: string\n  publishedAt: string\n  bodyRaw: any\n  author?: string\n  image?: {\n    asset?: {\n      url?: string\n      description?: string\n      altText?: string\n      title?: string\n    }\n  }\n  slug: {\n    current: string\n  }\n}\n\nconst PostClientTemplate: React.FC = () => {\n  const { pathname } = useLocation()\n  const slug = pathname // Use the full path as the slug\n\n  const [post, setPost] = useState<RemotePost | null>(null);\n  const [loading, setLoading] = useState(true); // Start with loading true\n  const [error, setError] = useState<string | null>(null);\n  const [notFound, setNotFound] = useState(false);\n  \n  const fetchPostData = async (slug: string): Promise<RemotePost | null> => {\n    try {\n      const query = `query {\n        allPost {\n          title\n          slug {\n            current\n          }\n          publishedAt\n          bodyRaw\n          author\n          image {\n            asset {\n              description\n              title\n              altText\n              url\n            }\n          }\n        }\n      }`\n\n      const response = await fetch(remoteGraphqlURL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ query }),\n      })\n\n      const result = await response.json()\n      if (result.errors) {\n        throw new Error(result.errors[0].message)\n      }\n\n      const thePost = (result.data?.allPost || [])\n        .find((post: RemotePost) => \n          post.slug?.current === slug || \n          post.slug?.current === slug.replace(/\\/$/, '')\n        )\n      \n      if (!thePost) {\n        setNotFound(true)\n        return null\n      }\n      \n      return thePost\n    } catch (err) {\n      console.error(\"Error fetching post:\", err)\n      setError(\"Failed to fetch post data.\")\n      return null\n    }\n  }\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const loadPost = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const fetchedPost = await fetchPostData(slug);\n        \n        if (!isMounted) return;\n        \n        if (fetchedPost) {\n          setPost(fetchedPost);\n          setNotFound(false);\n        } else {\n          setNotFound(true);\n        }\n      } catch (err) {\n        if (!isMounted) return;\n        console.error('Error in loadPost:', err);\n        setError('An error occurred while loading the post');\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    loadPost();\n    \n    return () => {\n      isMounted = false;\n    };\n  }, [slug]);\n  \n  // Handle navigation when notFound changes\n  useEffect(() => {\n    if (notFound && typeof window !== 'undefined') {\n      navigate('/404', { replace: true }).catch((err: Error) => {\n        console.error('Navigation error:', err);\n      });\n    }\n  }, [notFound, navigate]);\n\n  // Show loading state\n  if (loading) {\n    return (\n      <DefaultLayout>\n        <p>Caricamento...</p>\n      </DefaultLayout>\n    );\n  }\n\n  // If there was an error, show error message\n  if (error) {\n    return (\n      <DefaultLayout>\n        <p>Errore: {error}</p>\n      </DefaultLayout>\n    );\n  }\n\n  // If post is not found, we'll show a 404 page\n  // The navigation is handled by the useEffect above\n  if (notFound || !post) {\n    return null;\n  }\n\n  // At this point, we know post is defined\n  const renderTitle = post.title\n  const renderPublishedAt = post.publishedAt\n  const renderBody = post.bodyRaw\n  const author = post.author || null\n\n  // main image code\n  const mainImgAlt = post.image?.asset?.altText || \"\"\n  const renderImageUrl = post.image?.asset?.url || null\n\n  // Handle loading and error states\n  if (loading) return <p>Caricamento...</p>\n  if (error || !post) {\n    // This will set the status code to 404 on the server side\n    if (typeof window !== 'undefined') {\n      navigate('/404', { replace: true })\n    }\n    return null\n  }\n\n  return (\n    <DefaultLayout>\n      <Post\n        renderTitle={renderTitle}\n        renderPublishedAt={renderPublishedAt ?? \"\"}\n        gatsbyImage={undefined}\n        renderImageUrl={renderImageUrl ?? \"\"}\n        renderBody={renderBody}\n        author={author ?? \"\"}\n        coverImageAlt={mainImgAlt}\n      />\n    </DefaultLayout>\n  )\n}\n\nexport default PostClientTemplate\n"],"names":["remoteGraphqlURL","PostClientTemplate","_post$image","_post$image$asset","_post$image2","_post$image2$asset","pathname","useLocation","slug","post","setPost","useState","loading","setLoading","error","setError","notFound","setNotFound","useEffect","isMounted","async","fetchedPost","_result$data","query","response","fetch","method","headers","body","JSON","stringify","result","json","errors","Error","message","thePost","data","allPost","find","_post$slug","_post$slug2","current","replace","err","console","fetchPostData","loadPost","window","navigate","catch","React","DefaultLayout","renderTitle","title","renderPublishedAt","publishedAt","renderBody","bodyRaw","author","mainImgAlt","image","asset","altText","renderImageUrl","url","Post","gatsbyImage","undefined","coverImageAlt"],"sourceRoot":""}