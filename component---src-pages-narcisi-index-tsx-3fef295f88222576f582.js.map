{"version":3,"file":"component---src-pages-narcisi-index-tsx-3fef295f88222576f582.js","mappings":"mOAGO,MAAMA,EAAUC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAVJ,CAAU,2FAQpBK,EAAgBL,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,wBAAAC,YAAA,gBAAVJ,CAAU,+LAEjBM,EAAAA,GAAOC,MAAMC,SAMXF,EAAAA,GAAOC,MAAME,SAGbH,EAAAA,GAAOC,MAAMG,UCFrC,MAVmBC,IAAA,IAAC,GAAEC,EAAE,MAAEC,GAAwBF,EAAA,OAChDG,EAAAA,cAACC,EAAS,KACRD,EAAAA,cAACE,EAAAA,KAAI,CAACC,MAAO,CAAEC,eAAgB,QAAUN,GAAIA,GAC3CE,EAAAA,cAACC,EAAe,KACdD,EAAAA,cAACK,EAAAA,GAAI,KAAEN,KAGD,C,0cCoDd,MA1DyCO,KACvC,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cA2BtBC,EAAUC,EAAAA,EAChB,IAAKD,EACH,OACET,EAAAA,cAACW,EAAAA,EAAa,KACZX,EAAAA,cAACK,EAAAA,GAAI,KAAC,2BAKZ,MAAMO,EAAWL,EAAKM,qBAAqBC,MACrCC,EAASR,EAAKS,QAAQF,MAGtBG,EAAiBL,EAASM,KAAKC,IACnC,MAAMC,EAAQL,EAAOM,MAAMC,GAAaA,EAAIC,OAASJ,EAAKK,WAC1D,MAAO,IACFL,EACHC,MAAOA,GAAQK,EAAAA,EAAAA,GAASL,EAAMM,iBAAmB,KAClD,IAGH,OACE1B,EAAAA,cAACW,EAAAA,EAAa,KACZX,EAAAA,cAAC2B,EAAAA,EAAkB,CAACC,SAAUnB,EAASM,OAAQE,IAC/CjB,EAAAA,cAAC6B,EAAAA,EAAwB,CAACD,SAAUnB,EAASM,OAAQE,IACrDjB,EAAAA,cAAC8B,EAAAA,EAAU,CAAChC,GAAG,QAAQC,MAAM,iBACf,EAMb,MAAMgC,EAAeA,IAC1B/B,EAAAA,cAAA,aAAO,2C","sources":["webpack://site-gruppo-natura-lentiai/./src/components/button-link/styled.ts","webpack://site-gruppo-natura-lentiai/./src/components/button-link/index.tsx","webpack://site-gruppo-natura-lentiai/./src/pages/narcisi/index.tsx"],"sourcesContent":["import styled from \"styled-components\"\nimport { colors } from \"../../styles\"\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin: 2em 0 2em 0;\n`\n\nexport const ButtonWrapper = styled.div`\n  text-align: center;\n  background-color: ${colors.green.green400};\n  padding: 0.8em;\n  max-width: 125px;\n  border-radius: 8px;\n  transition: all 0.5s;\n  &:hover {\n    background-color: ${colors.green.green500};\n  }\n  &:active {\n    background-color: ${colors.green.green600};\n  }\n  > p {\n    margin-top: 0;\n  }\n`\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport * as T from \"./../typography\"\nimport * as S from \"./styled\"\n\ninterface ButtonLinkProps {\n  to: string\n  label: string\n}\n\nconst ButtonLink = ({ to, label }: ButtonLinkProps) => (\n  <S.Wrapper>\n    <Link style={{ textDecoration: \"none\" }} to={to}>\n      <S.ButtonWrapper>\n        <T.P2>{label}</T.P2>\n      </S.ButtonWrapper>\n    </Link>\n  </S.Wrapper>\n)\n\nexport default ButtonLink\n","import { graphql, useStaticQuery, type HeadFC, type PageProps } from \"gatsby\"\nimport { getImage } from \"gatsby-plugin-image\"\nimport * as React from \"react\"\nimport DefaultLayout from \"../../components/default-layout\"\nimport MobileContentToComponent from \"../../components/mobile-pagedata-text-components\"\nimport ContentToComponent from \"../../components/pagedata-text-components\"\nimport { DataJSONType, ImageData } from \"../../types\"\nimport * as T from \"./../../components/typography\"\nimport dataJSON from \"../../../content/narcisi/index.json\"\nimport ButtonLink from \"../../components/button-link\"\n\nconst NarcisiPage: React.FC<PageProps> = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allImageMetadataJson(filter: { tags: { in: [\"narcisi-main\"] } }) {\n        nodes {\n          title\n          description\n          fileName\n          tags\n          copyright\n          alt\n        }\n      }\n      allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n        nodes {\n          base\n          childImageSharp {\n            gatsbyImageData(\n              width: 1200\n              placeholder: BLURRED\n              formats: [AUTO, WEBP, AVIF]\n            )\n          }\n        }\n      }\n    }\n  `)\n\n  const content = dataJSON.index as DataJSONType\n  if (!content)\n    return (\n      <DefaultLayout>\n        <T.H1>Contenuto non trovato!</T.H1>\n      </DefaultLayout>\n    )\n\n  // Map metadata and image nodes\n  const metadata = data.allImageMetadataJson.nodes\n  const images = data.allFile.nodes\n\n  // Match images to metadata using the fileName\n  const filteredImages = metadata.map((meta: any) => {\n    const image = images.find((img: any) => img.base === meta.fileName)\n    return {\n      ...meta,\n      image: image ? getImage(image.childImageSharp) : null,\n    }\n  }) as ImageData[]\n\n  return (\n    <DefaultLayout>\n      <ContentToComponent pageData={content} images={filteredImages} />\n      <MobileContentToComponent pageData={content} images={filteredImages} />\n      <ButtonLink to=\"mappe\" label=\"Vai a mappe!\" />\n    </DefaultLayout>\n  )\n}\n\nexport default NarcisiPage\n\nexport const Head: HeadFC = () => (\n  <title>Gruppo Natura Lentiai - Progetto Narcisi</title>\n)\n"],"names":["Wrapper","styled","div","withConfig","displayName","componentId","ButtonWrapper","colors","green","green400","green500","green600","_ref","to","label","React","S","Link","style","textDecoration","T","NarcisiPage","data","useStaticQuery","content","dataJSON","DefaultLayout","metadata","allImageMetadataJson","nodes","images","allFile","filteredImages","map","meta","image","find","img","base","fileName","getImage","childImageSharp","ContentToComponent","pageData","MobileContentToComponent","ButtonLink","Head"],"sourceRoot":""}